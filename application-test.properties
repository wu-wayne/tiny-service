#
main = ${launcher}
#shutdown = ${hook}
daemon = true
executor = ${pool}
#hook.class = x.y.ServerShutdown
pool.class = net.tiny.service.PausableThreadPoolExecutor
pool.size = 2
pool.max = 5
pool.timeout = 1
launcher.class = net.tiny.ws.Launcher
launcher.builder.port = 8080
# launcher.builder.bind = 192.168.1.1
launcher.builder.backlog = 10
launcher.builder.stopTimeout = 1
launcher.builder.executor = ${pool}
# launcher.builder.ssl.file = /tmp/ks
# launcher.builder.ssl.password = 12345
# launcher.builder.ssl.clientAuth = false
# launcher.builder.handlers = ${static}, ${health}, ${api}
launcher.builder.handlers = ${resource}, ${health}
resource.class = net.tiny.ws.ResourceHttpHandler
resource.path = /
resource.filters = ${snap}, ${logger}
resource.paths = img:src/test/resources/home/img, js:src/test/resources/home/js, css:src/test/resources/home/css, icon:src/test/resources/home/icon
health.class = net.tiny.ws.VoidHttpHandler
health.path = /health
health.filters = ${snap}, ${logger}
#api.class = net.tiny.ws.JsonHttpHandler
#api.path = /v1/api
logger.class = net.tiny.ws.AccessLogger
# logger.format = COMBINED
# logger.file = /var/log/http-access.log
params.class = net.tiny.ws.ParameterFilter
snap.class = net.tiny.ws.SnapFilter
#
callback = ${service}
service.class = net.tiny.service.ServiceLocator
service.listener = ${monitor}
monitor.class = net.tiny.service.ServiceLocator$ServiceMonitor